/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var IPA_VIEW_TYPE = "ipa-palette-view";
var DEFAULT_SETTINGS = {
  showVowels: true,
  showConsonants: true,
  showDiacritics: true,
  showSuprasegmentals: true,
  categoryOrder: ["Vowels", "Consonants", "Diacritics", "Suprasegmentals"]
};
var IPAPaletteView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.lastActiveEditor = null;
    this.lastActiveView = null;
    // IPA character sets
    this.ipaVowels = [
      "i",
      "y",
      "\u0268",
      "\u0289",
      "\u026F",
      "u",
      "\u026A",
      "\u028F",
      "\u028A",
      "e",
      "\xF8",
      "\u0258",
      "\u0275",
      "\u0264",
      "o",
      "\u0259",
      "\u025B",
      "\u0153",
      "\u025C",
      "\u025E",
      "\u028C",
      "\u0254",
      "\xE6",
      "\u0250",
      "a",
      "\u0276",
      "\u0251",
      "\u0252"
    ];
    this.ipaConsonants = [
      "p",
      "b",
      "t",
      "d",
      "\u0288",
      "\u0256",
      "c",
      "\u025F",
      "k",
      "g",
      "q",
      "\u0262",
      "\u0294",
      "m",
      "\u0271",
      "n",
      "\u0273",
      "\u0272",
      "\u014B",
      "\u0274",
      "\u0299",
      "r",
      "\u0280",
      "\u027E",
      "\u027D",
      "\u0278",
      "\u03B2",
      "f",
      "v",
      "\u03B8",
      "\xF0",
      "s",
      "z",
      "\u0283",
      "\u0292",
      "\u0282",
      "\u0290",
      "\xE7",
      "\u029D",
      "x",
      "\u0263",
      "\u03C7",
      "\u0281",
      "\u0127",
      "\u0295",
      "h",
      "\u0266",
      "\u026C",
      "\u026E",
      "\u028B",
      "\u0279",
      "\u027B",
      "j",
      "\u0270",
      "l",
      "\u026D",
      "\u028E",
      "\u029F"
    ];
    this.diacritics = [
      "\u0325",
      "\u032C",
      "\u0339",
      "\u031C",
      "\u031F",
      "\u0320",
      "\u0308",
      "\u033D",
      "\u0329",
      "\u032F",
      "\u02DE",
      "\u0324",
      "\u0330",
      "\u033C",
      "\u032A",
      "\u033A",
      "\u033B",
      "\u0303",
      "\u207F",
      "\u02E1",
      "\u031A",
      "\u0318",
      "\u0319",
      "\u031D",
      "\u031E",
      "\u0306",
      "\u030B",
      "\u0301",
      "\u0304",
      "\u0300",
      "\u030F",
      "\u030C",
      "\u0302",
      "\u1DC4",
      "\u1DC5",
      "\u1DC8",
      "\u2193",
      "\u2191",
      "\u2197",
      "\u2198"
    ];
    this.suprasegmentals = [
      "\u02C8",
      "\u02CC",
      "\u02D0",
      "\u02D1",
      "\u0306",
      "|",
      "\u2016",
      ".",
      "\u203F",
      "\u0361"
    ];
    this.plugin = plugin;
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView) {
          this.lastActiveView = activeView;
          this.lastActiveEditor = activeView.editor;
        }
      })
    );
  }
  getViewType() {
    return IPA_VIEW_TYPE;
  }
  getDisplayText() {
    return "IPA Palette";
  }
  getIcon() {
    return "whole-word";
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "IPA Palette" });
    const categoryOrder = this.plugin.settings.categoryOrder;
    for (const category of categoryOrder) {
      switch (category) {
        case "Vowels":
          if (this.plugin.settings.showVowels) {
            this.createCharacterSection(contentEl, "Vowels", this.ipaVowels);
          }
          break;
        case "Consonants":
          if (this.plugin.settings.showConsonants) {
            this.createCharacterSection(contentEl, "Consonants", this.ipaConsonants);
          }
          break;
        case "Diacritics":
          if (this.plugin.settings.showDiacritics) {
            this.createCharacterSection(contentEl, "Diacritics", this.diacritics);
          }
          break;
        case "Suprasegmentals":
          if (this.plugin.settings.showSuprasegmentals) {
            this.createCharacterSection(contentEl, "Suprasegmentals", this.suprasegmentals);
          }
          break;
      }
    }
  }
  createCharacterSection(container, title, characters) {
    const sectionEl = container.createDiv({ cls: "ipa-section" });
    sectionEl.createEl("h3", { text: title });
    const gridEl = sectionEl.createDiv({ cls: "ipa-grid" });
    for (const char of characters) {
      const charButton = gridEl.createEl("button", {
        text: char,
        cls: "ipa-char-button"
      });
      charButton.addEventListener("click", () => {
        this.insertCharacterAtCursor(char);
      });
    }
  }
  insertCharacterAtCursor(char) {
    if (this.lastActiveEditor && this.lastActiveView) {
      const editor = this.lastActiveEditor;
      const cursor = editor.getCursor();
      editor.replaceRange(char, cursor);
      editor.setCursor({
        line: cursor.line,
        ch: cursor.ch + char.length
      });
      this.lastActiveView.editor.focus();
    } else {
      new import_obsidian.Notice("No active markdown editor found. Please click in an editor first.");
    }
  }
  async onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(
      IPA_VIEW_TYPE,
      (leaf) => {
        this.ipaView = new IPAPaletteView(leaf, this);
        return this.ipaView;
      }
    );
    this.app.workspace.onLayoutReady(() => {
      this.activateView();
    });
    this.addCommand({
      id: "open-ipa-palette",
      name: "Open IPA Palette",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new IPASettingTab(this.app, this));
  }
  // Function to activate the IPA palette view
  async activateView() {
    const { workspace } = this.app;
    const existingLeaves = workspace.getLeavesOfType(IPA_VIEW_TYPE);
    if (existingLeaves.length > 0) {
      workspace.revealLeaf(existingLeaves[0]);
      return;
    }
    await workspace.getRightLeaf(false).setViewState({
      type: IPA_VIEW_TYPE,
      active: true
    });
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(IPA_VIEW_TYPE);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // refreshes view when settings change
  refreshView() {
    if (this.ipaView) {
      this.ipaView.onOpen();
    }
  }
};
var IPASettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "IPA Palette Settings" });
    containerEl.createEl("h3", { text: "Category Visibility" });
    new import_obsidian.Setting(containerEl).setName("Show Vowels").setDesc("Show the vowels section in the IPA palette").addToggle((toggle) => toggle.setValue(this.plugin.settings.showVowels).onChange(async (value) => {
      this.plugin.settings.showVowels = value;
      await this.plugin.saveSettings();
      this.plugin.refreshView();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Consonants").setDesc("Show the consonants section in the IPA palette").addToggle((toggle) => toggle.setValue(this.plugin.settings.showConsonants).onChange(async (value) => {
      this.plugin.settings.showConsonants = value;
      await this.plugin.saveSettings();
      this.plugin.refreshView();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Diacritics").setDesc("Show the diacritics section in the IPA palette").addToggle((toggle) => toggle.setValue(this.plugin.settings.showDiacritics).onChange(async (value) => {
      this.plugin.settings.showDiacritics = value;
      await this.plugin.saveSettings();
      this.plugin.refreshView();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Suprasegmentals").setDesc("Show the suprasegmentals section in the IPA palette").addToggle((toggle) => toggle.setValue(this.plugin.settings.showSuprasegmentals).onChange(async (value) => {
      this.plugin.settings.showSuprasegmentals = value;
      await this.plugin.saveSettings();
      this.plugin.refreshView();
    }));
    containerEl.createEl("h3", { text: "Category Order" });
    containerEl.createEl("p", { text: "Drag to reorder the categories" });
    const orderList = containerEl.createEl("div", { cls: "ipa-order-list" });
    for (let i = 0; i < this.plugin.settings.categoryOrder.length; i++) {
      const category = this.plugin.settings.categoryOrder[i];
      const item = orderList.createEl("div", {
        cls: "ipa-order-item",
        text: category
      });
      const dragHandle = item.createEl("span", {
        cls: "ipa-drag-handle",
        text: "\u2261"
      });
      item.setAttribute("draggable", "true");
      item.addEventListener("dragstart", (e) => {
        e.dataTransfer.setData("text/plain", i.toString());
        item.addClass("ipa-dragging");
      });
      item.addEventListener("dragend", () => {
        item.removeClass("ipa-dragging");
      });
      item.addEventListener("dragover", (e) => {
        e.preventDefault();
        item.addClass("ipa-drag-over");
      });
      item.addEventListener("dragleave", () => {
        item.removeClass("ipa-drag-over");
      });
      item.addEventListener("drop", async (e) => {
        e.preventDefault();
        item.removeClass("ipa-drag-over");
        const fromIndex = parseInt(e.dataTransfer.getData("text/plain"));
        const toIndex = i;
        if (fromIndex !== toIndex) {
          const newOrder = [...this.plugin.settings.categoryOrder];
          const [moved] = newOrder.splice(fromIndex, 1);
          newOrder.splice(toIndex, 0, moved);
          this.plugin.settings.categoryOrder = newOrder;
          await this.plugin.saveSettings();
          this.plugin.refreshView();
          this.display();
        }
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
